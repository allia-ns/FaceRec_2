# -*- coding: utf-8 -*-
"""FaceRec_GUI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/161qDTvXtbsxSod2WIIXgLczJBSDCXIQI
"""

# -*- coding: utf-8 -*-

import streamlit as st
from PIL import Image

# THIS MUST BE THE ABSOLUTE FIRST STREAMLIT COMMAND!
st.set_page_config(
    page_title="Face Recognition System",
    page_icon="üé≠",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items=None
)

# NOW import everything else AFTER set_page_config
import os
import numpy as np
import matplotlib.pyplot as plt
import io
import base64


# Import your face recognition module with error handling
face_rec_available = False
face_rec_error = ""

def safe_import_facerec():
    """Import FaceRec functions safely"""
    global face_rec_available, face_rec_error, load_model, recognize_face, quick_recognize

    try:
        from FaceRec import load_model, recognize_face, quick_recognize
        face_rec_available = True
        return True
    except Exception as e:
        face_rec_error = str(e)
        face_rec_available = False
        return False

def show_import_status():
    """Show the import status after page config is set"""
    # Try to import here, after streamlit is properly initialized
    if not face_rec_available:
        safe_import_facerec()

    if face_rec_available:
        st.success("‚úÖ FaceRec module loaded successfully!")
    else:
        st.error(f"‚ùå Error importing FaceRec: {face_rec_error}")
        st.info("üí° Make sure FaceRec.py is in the same directory!")

def main():
    # Header
    st.title("üé≠ Face Recognition System")
    st.markdown("---")

    # Show import status
    show_import_status()

    # Only proceed if FaceRec is available
    if not face_rec_available:
        st.stop()

    # Sidebar for model loading
    with st.sidebar:
        st.header("üîß Model Settings")

        # Load model
        if st.button("üì• Load Trained Model"):
            with st.spinner("Loading model..."):
                try:
                    # Load your saved model
                    mean_face, eigenfaces, projected_train, eigenvalues, X, labels = load_model('saved_models')

                    if mean_face is not None:
                        # Store in session state
                        st.session_state.model_loaded = True
                        st.session_state.mean_face = mean_face
                        st.session_state.eigenfaces = eigenfaces
                        st.session_state.projected_train = projected_train
                        st.session_state.eigenvalues = eigenvalues
                        st.session_state.X = X
                        st.session_state.labels = labels

                        st.success("‚úÖ Model loaded successfully!")
                        st.info(f"üìä Training data: {len(set(labels))} people")
                    else:
                        st.error("‚ùå Failed to load model!")

                except Exception as e:
                    st.error(f"‚ùå Error loading model: {e}")

    # Main content
    col1, col2 = st.columns([1, 1])

    with col1:
        st.header("üìÅ Dataset Selection")

        # Dataset folder (for display purposes)
        dataset_path = st.selectbox(
            "Select Dataset Folder:",
            ["dataset_subset", "custom_dataset"],
            index=0
        )

        if os.path.exists(dataset_path):
            st.success(f"‚úÖ Dataset found: {dataset_path}")

            # Show dataset info
            try:
                persons = os.listdir(dataset_path)
                persons = [p for p in persons if os.path.isdir(os.path.join(dataset_path, p))]
                st.info(f"üë• Found {len(persons)} people in dataset")

                # Show person names
                with st.expander("üëÄ View People in Dataset"):
                    for person in sorted(persons):
                        person_path = os.path.join(dataset_path, person)
                        img_count = len([f for f in os.listdir(person_path)
                                       if f.lower().endswith(('.jpg', '.jpeg', '.png'))])
                        st.write(f"‚Ä¢ {person}: {img_count} images")

            except Exception as e:
                st.warning(f"‚ö†Ô∏è Could not read dataset: {e}")
        else:
            st.error(f"‚ùå Dataset not found: {dataset_path}")

    with col2:
        st.header("üñºÔ∏è Test Image")

        # File upload
        uploaded_file = st.file_uploader(
            "Choose a test image...",
            type=['jpg', 'jpeg', 'png'],
            accept_multiple_files=False
        )

        # OR select from test_img folder
        st.write("**OR select from test folder:**")
        test_folder = "test_img"

        if os.path.exists(test_folder):
            test_images = [f for f in os.listdir(test_folder)
                          if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

            if test_images:
                selected_test = st.selectbox(
                    "Select test image:",
                    ["None"] + sorted(test_images)
                )

                if selected_test != "None":
                    test_image_path = os.path.join(test_folder, selected_test)

                    # Display the test image
                    try:
                        test_img = Image.open(test_image_path)
                        st.image(test_img, caption=f"Test Image: {selected_test}", width=300)

                        # Recognition button
                        if st.button("üîç Recognize Face", type="primary"):
                            if hasattr(st.session_state, 'model_loaded') and st.session_state.model_loaded:

                                with st.spinner("Recognizing face..."):
                                    try:
                                        # Set threshold
                                        threshold = st.sidebar.slider("üéØ Recognition Threshold", 5.0, 30.0, 15.0, 0.5)

                                        # Perform recognition
                                        result, distance, top_matches = quick_recognize(
                                            test_image_path,
                                            st.session_state.mean_face,
                                            st.session_state.eigenfaces,
                                            st.session_state.projected_train,
                                            st.session_state.X,
                                            st.session_state.labels,
                                            threshold=threshold
                                        )

                                        # Display results
                                        st.markdown("---")
                                        st.header("üéØ Recognition Results")

                                        if result:
                                            st.success(f"‚úÖ **MATCH FOUND!**")
                                            st.write(f"üë§ **Identified as:** {result}")
                                            st.write(f"üìè **Distance:** {distance:.2f}")

                                            # Show matched image from dataset
                                            try:
                                                # Find the matched image in dataset
                                                matched_idx = None
                                                for i, label in enumerate(st.session_state.labels):
                                                    if label == result:
                                                        matched_idx = i
                                                        break

                                                if matched_idx is not None:
                                                    matched_img_vec = st.session_state.X[:, matched_idx]
                                                    matched_img = matched_img_vec.reshape(100, 100)

                                                    st.write("**Matched image from dataset:**")
                                                    fig, ax = plt.subplots(figsize=(4, 4))
                                                    ax.imshow(matched_img, cmap='gray')
                                                    ax.set_title(f"Match: {result}")
                                                    ax.axis('off')
                                                    st.pyplot(fig)

                                            except Exception as e:
                                                st.warning(f"Could not display matched image: {e}")

                                        else:
                                            st.error(f"‚ùå **NO MATCH FOUND**")
                                            st.write(f"üìè **Minimum distance:** {distance:.2f}")
                                            st.write(f"üéØ **Threshold:** {threshold:.2f}")
                                            st.info("üí° Try adjusting the threshold or use a clearer image")

                                        # Show top 3 matches
                                        if top_matches:
                                            st.write("**üèÜ Top 3 closest matches:**")
                                            for i, (dist, label, idx) in enumerate(top_matches):
                                                st.write(f"{i+1}. {label} (distance: {dist:.2f})")

                                    except Exception as e:
                                        st.error(f"‚ùå Recognition error: {e}")

                            else:
                                st.warning("‚ö†Ô∏è Please load the model first!")

                    except Exception as e:
                        st.error(f"‚ùå Error loading test image: {e}")

            else:
                st.warning(f"‚ö†Ô∏è No images found in {test_folder}")

        else:
            st.warning(f"‚ö†Ô∏è Test folder not found: {test_folder}")

        # Handle uploaded file
        if uploaded_file is not None:
            st.write("**Uploaded image:**")
            uploaded_img = Image.open(uploaded_file)
            st.image(uploaded_img, caption="Uploaded Test Image", width=300)

            # Save uploaded file temporarily
            temp_path = f"temp_{uploaded_file.name}"
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

            # Recognition button for uploaded image
            if st.button("üîç Recognize Uploaded Face", type="primary"):
                if hasattr(st.session_state, 'model_loaded') and st.session_state.model_loaded:

                    with st.spinner("Recognizing uploaded face..."):
                        try:
                            threshold = st.sidebar.slider("üéØ Recognition Threshold", 5.0, 30.0, 15.0, 0.5)

                            result, distance, top_matches = quick_recognize(
                                temp_path,
                                st.session_state.mean_face,
                                st.session_state.eigenfaces,
                                st.session_state.projected_train,
                                st.session_state.X,
                                st.session_state.labels,
                                threshold=threshold
                            )

                            # Display results (same as above)
                            st.markdown("---")
                            st.header("üéØ Recognition Results")

                            if result:
                                st.success(f"‚úÖ **MATCH FOUND!**")
                                st.write(f"üë§ **Identified as:** {result}")
                                st.write(f"üìè **Distance:** {distance:.2f}")
                            else:
                                st.error(f"‚ùå **NO MATCH FOUND**")
                                st.write(f"üìè **Minimum distance:** {distance:.2f}")
                                st.write(f"üéØ **Threshold:** {threshold:.2f}")

                            # Cleanup
                            if os.path.exists(temp_path):
                                os.remove(temp_path)

                        except Exception as e:
                            st.error(f"‚ùå Recognition error: {e}")
                            if os.path.exists(temp_path):
                                os.remove(temp_path)

                else:
                    st.warning("‚ö†Ô∏è Please load the model first!")

    # Footer
    st.markdown("---")
    st.markdown("üéì **Face Recognition System** - Aljabar Linear Project")
    st.markdown("üìö Universitas Sebelas Maret - Teknik Informatika")

if __name__ == "__main__":
    # Initialize session state
    if 'model_loaded' not in st.session_state:
        st.session_state.model_loaded = False

    main()